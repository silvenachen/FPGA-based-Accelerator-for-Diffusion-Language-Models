//=============================================================================
// Auto generated by Allo
//=============================================================================

// OpenCL utility layer include
#include "xcl2.hpp"
#include <algorithm>
#include <cstdio>
#include <random>
#include <vector>
#include <iomanip>

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cout << "Usage: " << argv[0] << " <XCLBIN File>" << std::endl;
        return EXIT_FAILURE;
    }

    std::string binaryFile = argv[1];
    cl_int err;
    cl::CommandQueue q;
    cl::Context context;
    cl::Program program;
    cl::Kernel krnl_allo_DDitBlock;
    // Allocate Memory in Host Memory
    // When creating a buffer with user pointer (CL_MEM_USE_HOST_PTR), under the
    // hood user ptr is used if it is properly aligned. when not aligned, runtime had no choice
    // but to create its own host side buffer. So it is recommended to use this allocator if
    // user wish to create buffer using CL_MEM_USE_HOST_PTR to align user buffer to page
    // boundary. It will ensure that user buffer is used when user create Buffer/Mem object with
    // CL_MEM_USE_HOST_PTR
    size_t size_bytes_in0 = sizeof(float) * 524288;
    std::vector<float, aligned_allocator<float> > source_in0(524288);
    size_t size_bytes_in1 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in1(512);
    size_t size_bytes_in2 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in2(512);
    size_t size_bytes_in3 = sizeof(float) * 32768;
    std::vector<float, aligned_allocator<float> > source_in3(32768);
    size_t size_bytes_in4 = sizeof(float) * 32768;
    std::vector<float, aligned_allocator<float> > source_in4(32768);
    size_t size_bytes_in5 = sizeof(float) * 262144;
    std::vector<float, aligned_allocator<float> > source_in5(262144);
    size_t size_bytes_in6 = sizeof(float) * 262144;
    std::vector<float, aligned_allocator<float> > source_in6(262144);
    size_t size_bytes_in7 = sizeof(float) * 262144;
    std::vector<float, aligned_allocator<float> > source_in7(262144);
    size_t size_bytes_in8 = sizeof(float) * 128;
    std::vector<float, aligned_allocator<float> > source_in8(128);
    size_t size_bytes_in9 = sizeof(float) * 393216;
    std::vector<float, aligned_allocator<float> > source_in9(393216);
    size_t size_bytes_in10 = sizeof(float) * 3072;
    std::vector<float, aligned_allocator<float> > source_in10(3072);
    size_t size_bytes_in11 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in11(512);
    size_t size_bytes_in12 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in12(512);
    size_t size_bytes_in13 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in13(512);
    size_t size_bytes_in14 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in14(512);
    size_t size_bytes_in15 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in15(512);
    size_t size_bytes_in16 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in16(512);
    size_t size_bytes_in17 = sizeof(float) * 262144;
    std::vector<float, aligned_allocator<float> > source_in17(262144);
    size_t size_bytes_in18 = sizeof(float) * 524288;
    std::vector<float, aligned_allocator<float> > source_in18(524288);
    size_t size_bytes_in19 = sizeof(float) * 262144;
    std::vector<float, aligned_allocator<float> > source_in19(262144);
    size_t size_bytes_in20 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in20(512);
    size_t size_bytes_in21 = sizeof(float) * 262144;
    std::vector<float, aligned_allocator<float> > source_in21(262144);
    size_t size_bytes_in22 = sizeof(float) * 512;
    std::vector<float, aligned_allocator<float> > source_in22(512);
    size_t size_bytes_out0 = sizeof(float) * 524288;
    std::vector<float, aligned_allocator<float> > source_out0(524288);

    // OPENCL HOST CODE AREA START
    // get_xil_devices() is a utility API which will find the xilinx
    // platforms and will return list of devices connected to Xilinx platform
    auto devices = xcl::get_xil_devices();
    // read_binary_file() is a utility API which will load the binaryFile
    // and will return the pointer to file buffer.
    auto fileBuf = xcl::read_binary_file(binaryFile);
    cl::Program::Binaries bins{{fileBuf.data(), fileBuf.size()}};
    bool valid_device = false;
    for (unsigned int i = 0; i < devices.size(); i++) {
        auto device = devices[i];
        // Creating Context and Command Queue for selected Device
        OCL_CHECK(err, context = cl::Context(device, nullptr, nullptr, nullptr, &err));
        OCL_CHECK(err, q = cl::CommandQueue(context, device, CL_QUEUE_PROFILING_ENABLE, &err));
        std::cout << "Trying to program device[" << i << "]: " << device.getInfo<CL_DEVICE_NAME>() << std::endl;
        cl::Program program(context, {device}, bins, nullptr, &err);
        if (err != CL_SUCCESS) {
            std::cout << "Failed to program device[" << i << "] with xclbin file!\n";
        } else {
            std::cout << "Device[" << i << "]: program successful!\n";
            OCL_CHECK(err, krnl_allo_DDitBlock = cl::Kernel(program, "allo_DDitBlock", &err));
            valid_device = true;
            break; // we break because we found a valid device
        }
    }
    if (!valid_device) {
        std::cout << "Failed to program any device found, exit!\n";
        exit(EXIT_FAILURE);
    }
    // Allocate Buffer in Global Memory
    // Buffers are allocated using CL_MEM_USE_HOST_PTR for efficient memory and
    // Device-to-host communication
    OCL_CHECK(err, cl::Buffer buffer_in0(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in0, source_in0.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in1(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in1, source_in1.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in2(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in2, source_in2.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in3(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in3, source_in3.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in4(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in4, source_in4.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in5(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in5, source_in5.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in6(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in6, source_in6.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in7(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in7, source_in7.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in8(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in8, source_in8.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in9(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in9, source_in9.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in10(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in10, source_in10.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in11(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in11, source_in11.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in12(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in12, source_in12.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in13(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in13, source_in13.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in14(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in14, source_in14.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in15(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in15, source_in15.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in16(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in16, source_in16.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in17(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in17, source_in17.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in18(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in18, source_in18.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in19(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in19, source_in19.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in20(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in20, source_in20.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in21(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in21, source_in21.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_in22(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in22, source_in22.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_out0(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, size_bytes_out0, source_out0.data(), &err));

    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(0, buffer_in0));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(1, buffer_in1));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(2, buffer_in2));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(3, buffer_in3));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(4, buffer_in4));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(5, buffer_in5));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(6, buffer_in6));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(7, buffer_in7));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(8, buffer_in8));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(9, buffer_in9));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(10, buffer_in10));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(11, buffer_in11));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(12, buffer_in12));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(13, buffer_in13));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(14, buffer_in14));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(15, buffer_in15));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(16, buffer_in16));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(17, buffer_in17));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(18, buffer_in18));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(19, buffer_in19));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(20, buffer_in20));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(21, buffer_in21));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(22, buffer_in22));
    OCL_CHECK(err, err = krnl_allo_DDitBlock.setArg(23, buffer_out0));
    // Copy input data to device global memory
    OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_in0, buffer_in1, buffer_in2, buffer_in3, buffer_in4, buffer_in5, buffer_in6, buffer_in7, buffer_in8, buffer_in9, buffer_in10, buffer_in11, buffer_in12, buffer_in13, buffer_in14, buffer_in15, buffer_in16, buffer_in17, buffer_in18, buffer_in19, buffer_in20, buffer_in21, buffer_in22}, 0 /* 0 means from host*/));

    cl::Event event;
    uint64_t nstimestart, nstimeend;
    std::cout << "|-------------------------+-------------------------|\n"
              << "| Kernel                  |    Wall-Clock Time (ns) |\n"
              << "|-------------------------+-------------------------|\n";

    // Launch the Kernel
    OCL_CHECK(err, err = q.enqueueTask(krnl_allo_DDitBlock, nullptr, &event));

    // Copy Result from Device Global Memory to Host Local Memory
    OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_out0}, CL_MIGRATE_MEM_OBJECT_HOST));
    q.finish();
    // OpenCL Host Code Ends

    // Get the execution time
    OCL_CHECK(err, err = event.getProfilingInfo<uint64_t>(CL_PROFILING_COMMAND_START, &nstimestart));
    OCL_CHECK(err, err = event.getProfilingInfo<uint64_t>(CL_PROFILING_COMMAND_END, &nstimeend));
    auto exe_time = nstimeend - nstimestart;
    std::cout << "| " << std::left << std::setw(24) << "allo_DDitBlock "
              << "|" << std::right << std::setw(24) << exe_time << " |\n";
    std::cout << "|-------------------------+-------------------------|\n";
    std::cout << "Note: Wall Clock Time is meaningful for real hardware execution "
              << "only, not for emulation.\n";
    std::cout << "Please refer to profile summary for kernel execution time for "
              << "hardware emulation.\n";
    std::cout << "TEST PASSED\n\n";
    return EXIT_SUCCESS;
}
